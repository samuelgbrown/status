// Generated by CoffeeScript 1.4.0
(function() {
  var AppRouter, AppView, ChartsView, ContentView, GithubFeaturedReposView, GithubTrendingReposView, HackerNewsTopStoriesView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.initialize = function() {
      return this.child = new ContentView();
    };

    return AppView;

  })(Backbone.View);

  ChartsView = (function(_super) {

    __extends(ChartsView, _super);

    function ChartsView() {
      return ChartsView.__super__.constructor.apply(this, arguments);
    }

    ChartsView.prototype.el = $('#charts');

    ChartsView.prototype.initialize = function() {
      this.loadingEl = this.$el.find('.loading')[0];
      return this.template = $('#chart-labels-template').html();
    };

    ChartsView.prototype.renderLabels = function(data) {
      return this.$el.append(_.template(this.template, {
        'data': data
      }));
    };

    ChartsView.prototype.populateCharts = function(data) {
      var arc, color, dataset, height, path, pie, radius, svg, width;
      this.hideLoadState();
      dataset = [];
      _.each(data, function(language) {
        return dataset.push(language);
      });
      width = 200;
      height = 200;
      radius = Math.min(width, height) / 2;
      color = d3.scale.category20();
      pie = d3.layout.pie().sort(null);
      arc = d3.svg.arc().innerRadius(radius - 60).outerRadius(radius - 20);
      svg = d3.select("#charts").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
      path = svg.selectAll("path").data(pie(dataset)).enter().append("path").attr("fill", function(d, i) {
        return color(i);
      }).attr("d", arc);
      this.renderLabels(data);
      return this.$el.fadeIn(750);
    };

    ChartsView.prototype.hideLoadState = function() {
      return $(this.loadingEl).hide();
    };

    ChartsView.prototype.showLoadState = function() {
      return $(this.loadingEl).show();
    };

    return ChartsView;

  })(AppView);

  ContentView = (function(_super) {

    __extends(ContentView, _super);

    function ContentView() {
      this.getGithubData = __bind(this.getGithubData, this);
      return ContentView.__super__.constructor.apply(this, arguments);
    }

    ContentView.prototype.el = $('.main');

    ContentView.prototype.initialize = function() {
      this.header = this.$el.find('.main-header')[0];
      this.render();
      this.hackerNewsTopStories = new HackerNewsTopStoriesView();
      this.githubTrendingRepos = new GithubTrendingReposView();
      this.githubFeaturedRepos = new GithubFeaturedReposView();
      this.charts = new ChartsView();
      return this.getGithubData();
    };

    ContentView.prototype.render = function() {
      var h1;
      this.$el.fadeIn();
      h1 = $(this.header).find('h1')[0];
      return $(h1).animate({
        'margin-top': '0'
      });
    };

    ContentView.prototype.getGithubData = function() {
      var _this = this;
      return this.test = $.ajax({
        url: 'feeds/github.php',
        method: 'GET',
        data: null,
        success: function(res) {
          _this.githubTrendingRepos.populateRepos(true, res);
          _this.githubFeaturedRepos.populateRepos(true, res);
          return _this.charts.populateCharts(res.languages_data);
        },
        error: function(res) {
          _this.githubTrendingRepos.populateRepos(false, res);
          return _this.githubFeaturedRepos.populateRepos(false, res);
        }
      });
    };

    return ContentView;

  })(AppView);

  GithubFeaturedReposView = (function(_super) {

    __extends(GithubFeaturedReposView, _super);

    function GithubFeaturedReposView() {
      return GithubFeaturedReposView.__super__.constructor.apply(this, arguments);
    }

    GithubFeaturedReposView.prototype.el = $('#github-featured');

    GithubFeaturedReposView.prototype.initialize = function() {
      this.loadingEl = this.$el.find('.loading')[0];
      return this.render();
    };

    GithubFeaturedReposView.prototype.render = function() {
      this.$el.fadeIn(750);
      return this.template = $('#github-featured-template').html();
    };

    GithubFeaturedReposView.prototype.populateRepos = function(success_state, res) {
      if (success_state === true) {
        this.hideLoadState();
        this.$el.append(_.template(this.template, {
          'success': true,
          'data': res.featured_repos
        }));
        return this.animateStoriesIn();
      } else {
        this.hideLoadState();
        return this.$el.append(_.template(this.template, {
          'success': false
        }));
      }
    };

    GithubFeaturedReposView.prototype.animateStoriesIn = function() {
      var stories, timeDelay;
      stories = this.$el.find('li');
      timeDelay = 0;
      return _.each(stories, function(story) {
        var p;
        p = $(story).find('p')[0];
        setTimeout(function() {
          return $(p).animate({
            opacity: 1
          });
        }, timeDelay);
        return timeDelay = timeDelay + 65;
      });
    };

    GithubFeaturedReposView.prototype.hideLoadState = function() {
      return $(this.loadingEl).hide();
    };

    GithubFeaturedReposView.prototype.showLoadState = function() {
      return $(this.loadingEl).show();
    };

    return GithubFeaturedReposView;

  })(AppView);

  GithubTrendingReposView = (function(_super) {

    __extends(GithubTrendingReposView, _super);

    function GithubTrendingReposView() {
      return GithubTrendingReposView.__super__.constructor.apply(this, arguments);
    }

    GithubTrendingReposView.prototype.el = $('#github-trending');

    GithubTrendingReposView.prototype.initialize = function() {
      this.loadingEl = this.$el.find('.loading')[0];
      return this.render();
    };

    GithubTrendingReposView.prototype.render = function() {
      this.$el.fadeIn(750);
      return this.template = $('#github-trending-template').html();
    };

    GithubTrendingReposView.prototype.populateRepos = function(success_state, res) {
      if (success_state === true) {
        this.hideLoadState();
        this.$el.append(_.template(this.template, {
          'success': true,
          'data': res.trending_repos
        }));
        return this.animateStoriesIn();
      } else {
        this.hideLoadState();
        return this.$el.append(_.template(this.template, {
          'success': false
        }));
      }
    };

    GithubTrendingReposView.prototype.animateStoriesIn = function() {
      var stories, timeDelay;
      stories = this.$el.find('li');
      timeDelay = 0;
      return _.each(stories, function(story) {
        var p;
        p = $(story).find('p')[0];
        setTimeout(function() {
          return $(p).animate({
            opacity: 1
          });
        }, timeDelay);
        return timeDelay = timeDelay + 65;
      });
    };

    GithubTrendingReposView.prototype.hideLoadState = function() {
      return $(this.loadingEl).hide();
    };

    GithubTrendingReposView.prototype.showLoadState = function() {
      return $(this.loadingEl).show();
    };

    return GithubTrendingReposView;

  })(AppView);

  HackerNewsTopStoriesView = (function(_super) {

    __extends(HackerNewsTopStoriesView, _super);

    function HackerNewsTopStoriesView() {
      return HackerNewsTopStoriesView.__super__.constructor.apply(this, arguments);
    }

    HackerNewsTopStoriesView.prototype.el = $('#hacker-news-stories');

    HackerNewsTopStoriesView.prototype.initialize = function() {
      this.loadingEl = this.$el.find('.loading')[0];
      return this.render();
    };

    HackerNewsTopStoriesView.prototype.render = function() {
      var _this = this;
      this.$el.fadeIn(750);
      this.template = $('#hacker-news-stories-template').html();
      return $.ajax({
        url: 'feeds/articles.php',
        method: 'GET',
        data: null,
        success: function(res) {
          _this.hideLoadState();
          _this.$el.append(_.template(_this.template, {
            'success': true,
            'data': res
          }));
          return _this.animateStoriesIn();
        },
        error: function(res) {
          this.hideLoadState();
          return this.$el.append(_.template(this.template, {
            'success': false
          }));
        }
      });
    };

    HackerNewsTopStoriesView.prototype.animateStoriesIn = function() {
      var stories, timeDelay;
      stories = this.$el.find('li');
      timeDelay = 0;
      return _.each(stories, function(story) {
        var p;
        p = $(story).find('p')[0];
        setTimeout(function() {
          return $(p).animate({
            opacity: 1
          });
        }, timeDelay);
        return timeDelay = timeDelay + 65;
      });
    };

    HackerNewsTopStoriesView.prototype.resetAnimation = function() {
      var stories;
      stories = this.$el.find('li');
      return _.each(stories, function(story) {
        var p;
        p = $(story).find('p')[0];
        return $(p).css({
          opacity: 0
        });
      });
    };

    HackerNewsTopStoriesView.prototype.hideLoadState = function() {
      return $(this.loadingEl).hide();
    };

    HackerNewsTopStoriesView.prototype.showLoadState = function() {
      return $(this.loadingEl).show();
    };

    return HackerNewsTopStoriesView;

  })(AppView);

  AppRouter = (function(_super) {

    __extends(AppRouter, _super);

    function AppRouter() {
      return AppRouter.__super__.constructor.apply(this, arguments);
    }

    AppRouter.prototype.id = null;

    AppRouter.prototype.routes = {
      "*other": "defaultRoute"
    };

    AppRouter.prototype.start = function() {
      return Backbone.history.start({
        pushState: true
      });
    };

    AppRouter.prototype.defaultRoute = function() {
      return window.app.view = new AppView();
    };

    return AppRouter;

  })(Backbone.Router);

  window.app = {
    router: null,
    status: null,
    view: null
  };

  $(document).ready(function() {
    app.router = new AppRouter();
    return app.router.start();
  });

}).call(this);
